{"version":3,"file":"AV.types.js","sourceRoot":"","sources":["../src/AV.types.ts"],"names":[],"mappings":"AAEA,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,MAAM,CAAN,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAChC,uDAAM,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,SAAA,CAAA;IACpE,0DAAS,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,YAAA,CAAA;IAC1E,wDAAO,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,IAAI,UAAA,CAAA;AACxE,CAAC,EAJW,sBAAsB,KAAtB,sBAAsB,QAIjC","sourcesContent":["import { Asset } from 'expo-asset';\n\nimport ExponentAV from './ExponentAV';\n\nexport enum PitchCorrectionQuality {\n  Low = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Low,\n  Medium = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.Medium,\n  High = ExponentAV && ExponentAV.Qualities && ExponentAV.Qualities.High,\n}\n\nexport type AVPlaybackSource = number | AVPlaybackSourceObject | Asset;\n\nexport type AVPlaybackSourceObject = {\n  uri: string;\n  overrideFileExtensionAndroid?: string;\n  headers?: { [fieldName: string]: string };\n};\n\nexport type AVPlaybackNativeSource = {\n  uri: string;\n  overridingExtension?: string | null;\n  headers?: { [fieldName: string]: string };\n};\n\nexport type AVMetadata = {\n  title?: string;\n};\n\nexport type AVPlaybackStatus = AVPlaybackStatusError | AVPlaybackStatusSuccess;\n\nexport type AVPlaybackStatusError = {\n  isLoaded: false;\n  androidImplementation?: string;\n  error?: string; // populated exactly once when an error forces the object to unload\n};\n\nexport type AVPlaybackStatusSuccess = {\n  isLoaded: true;\n  androidImplementation?: string;\n\n  uri: string;\n\n  progressUpdateIntervalMillis: number;\n  durationMillis?: number;\n  positionMillis: number;\n  playableDurationMillis?: number;\n  seekMillisToleranceBefore?: number;\n  seekMillisToleranceAfter?: number;\n\n  shouldPlay: boolean;\n  isPlaying: boolean;\n  isBuffering: boolean;\n\n  rate: number;\n  shouldCorrectPitch: boolean;\n  volume: number;\n  isMuted: boolean;\n  isLooping: boolean;\n\n  didJustFinish: boolean; // true exactly once when the track plays to finish\n};\n\nexport type AVPlaybackStatusToSet = {\n  androidImplementation?: string;\n  progressUpdateIntervalMillis?: number;\n  positionMillis?: number;\n  seekMillisToleranceBefore?: number;\n  seekMillisToleranceAfter?: number;\n  shouldPlay?: boolean;\n  rate?: number;\n  shouldCorrectPitch?: boolean;\n  volume?: number;\n  isMuted?: boolean;\n  isLooping?: boolean;\n  pitchCorrectionQuality?: PitchCorrectionQuality;\n};\n\nexport type AVPlaybackTolerance = { toleranceMillisBefore?: number; toleranceMillisAfter?: number };\n"]}